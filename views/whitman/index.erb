<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Adventures of Walt Whitman!</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
  <link href='http://fonts.googleapis.com/css?family=IM+Fell+DW+Pica' rel='stylesheet' type='text/css'>
  <link href='http://fonts.googleapis.com/css?family=Rock+Salt' rel='stylesheet' type='text/css'>
</head>

<body>
<div class="title">
  <h1>Whitman Episode 0: SNAKEs in the Grass</h1>
</div>

<!-- <div id="satchel">
  <span class="item-container"><h3>Satchel</h3>
    <div class="inventory-box empty"></div>
    <div class="inventory-box empty"></div>
    <div class="inventory-box empty"></div>
  </span> -->



  <div id="impress">

    <div id="slide1" class="step slide itemable">
      <div class="slide-text">
        <h2 class="titlepage">"...and since the days of Sappho two forces of have fought countless battles in a secret, yet surprisingly well documented, war across forests, deserts, seas, quadrangles, arid tundras, fertile plains and student unions of this world. On one hand are the forces of POET, the Protectors of Educational Technologies, an organization dedicated to the archiving and dissemination of knowledge. On the other, less fragrant, hand are the nefarious forces of SNAKE, Shall Not Allow Knowledge-based Enterprises. There dread mission is to keep humanity swaddled in the comforting numbness of ignorance. This is the tale of one brave agent’s struggle against the heinous forces of not goodness..." </h2><br>
        <h2 class="titlepage"> - from "The Secret POET's Handbook" by Mary Oliver</h2>
        <br><br><h1 class="titlepage">The Adventures of Walt Whitman, POET!</h1>
        <h1 class="titlepage">Episode 0: SNAKEs in the Grass</h1>
        <div class="menu"><a href="#slide2">Start Your Adventure</a></div>
      </div>  
    </div>

    <div id="slide2" class="step slide itemable" data-y="2500">
      <div class="slide-text">
        <h2>Snedeker's Roadhouse</h2><br>
        <h3>The sound of breaking glass wakes you. Someone has tossed a rock through the window of your room. You are not surprised to find a note attached. It was seemingly hastily written and you struggle to make out its contents in the thin morning light: <br><br> “Walt,  there are SNAKEs in the grass! Somehow they have gotten wind of your plans and begun the move against you! Make haste to 23 Fulton Street and set your great work to the press while there is still time. Make your route circuitous, as the villains are not doubt tracking you. As always, avoid direct content- these SNAKEs are most venomous.<br>- H.D. Lord Tennyson <br><br>PS: My apologies regarding the window. The telegraph contraption is still not operating as it should. ”<br> <br>
        You quickly dress. You open your satchel to make sure your manuscript is still in your possession…it is. Sliding the satchel over your shoulder, you proceed down stairs. You pause…” should I leave by the <a href="#slide4">front</a>entrance, or the <a href="#slide3">rear</a>."</h3>
      </div>  
    </div>


    <div id="slide3" class="step slide itemable" data-x="500">
      <div class="slide-text">
        <h2>Strangely Dark Alleyway</h2><br>
        <h3>You duck discreetly into the alley behind the roadhouse. It is exceedingly dark. You can see long strings of sleigh bells in several large piles around the door. <br><br>“Yes, Snedeker’s famous Christmas parade is this very evening", you think.<br><br> As you look around for a way to  You also notice that one of the piles of silver bells at the far end of the alley is moving ever so slightly. You are tempted to<a href="#slide20">investigate</a> the bells, but perhaps you should make haste to the <a href="#slide4">street</a>.</h3>
      </div>
    </div>


    <div id="slide4" class="step slide itemable" data-x="15000">
      <div class="slide-text">
        <h2>Fort Green Park</h2><br>
        <h3>You hire a buggy to drive you Jamaca Plank Road, where the roadhouse sits, to Brooklyn proper but do not arrive at the entrance of the Fort Greene Park until mid-morning. The traffic was, as usual, ghastly. Exit the buggy you take a moment to gather yourself and consider your options. You could proceed <a href="#slide5">West</a> and walk along the East River or walk directly towards the <a href="#slide6">     Navy Yard</a>. <br><br>“It is not a question of speed”, you think to yourself, “it is a question of speed and safety…”</h3>
      </div>
    </div>

    <div id="slide5" class="step slide itemable" data-y="1500">
      <div class="slide-text">
        <h2>East River Landing</h2><br>
        <h3>As you approach the river you see a rowboat has recently been dragged up on the shoulder of the river. The tracks in the mud are fresh. In the boat you spy a crude mask made of snakeskin, several torches and small <a href="#slide21">bundle of papers</a> bound by a strip of greasy burlap. Proceed up the river to the <a href="#slide6">Navy Yard</a>.</h3>
      </div>
    </div>

    <div id="slide6" class="step slide itemable" data-x="2000">
      <div class="slide-text">
        <h2>Navy Yard</h2><br>
        <h3>You approach the Navy Yard and the hurly-burly of activity calms you just a bit. Perhaps it is just the comfort of being in the midst of a crowd. You can see the spire of the <a href="#slide22">Ship Shed</a> ahead of you. Suddenly you feel as though you are being watched. <br><br> "The HD said I was being tracked. It seems he was not wrong, which is a rather refreshing change."<br><br>Perhaps you should proceed <a href="#slide7">Downtown</a>.</h3>
      </div>
    </div>

    <div id="slide7" class="step slide itemable" data-y="6500">
      <div class="slide-text">
        <h2>Flatbush and Atlantic</h2><br>
        <h3>The streets teem with people, forcing you to walk more slowly and carefully. AS you maneuver through the crowd you notice that someone has scrawled words in red paint on the side of Riechter’s Supply Store, which sets on the northeast corner of the intersection: “WW, Beware of SNAKEs”. <br><br>You shake your head. First a rock through a window and now this? Someone should remind High Director Lord Tennyson that this is meant to be a secret war. You ponder proceeding<a href="#slide10">East</a>directly towards Fulton or going north towards<a href="#slide8">The Heights</a>.</h3>
      </div>
    </div>

    <div id="slide8" class="step slide itemable" data-y="3000">
      <div class="slide-text">
        <h2>Montague Hall</h2><br>
        <h3>Normally you find this place to be a relaxing tonic that, through sheer majesty, eases whatever troubles happen to be plaguing you. Not so today. <br><br>As you stare at the beautiful structure before you, you feel an suprising flash of foreboding. Your usual routine of Transendental Mediation usually keeps such unpleasentness at bay...but today has been far from ordinary. You had best move on...perhaps a short diversion is just the thing to calm your nerves. Walk back <a href="#slide7">Downtown</a> or take a quick trip to <a href="#slide23">Red Hook</a>to calm yourself.</h3>
      </div>
    </div>

    <div id="slide10" class="step slide itemable" data-x="3500">
      <div class="slide-text">
        <h2>Fulton and Prospect</h2><br>
        <h3>Fulton Street crackles with energy. There is a most motley collection of the merchants, servants, children, upright business men milling about.<br><br> "It feels positively electric." you chuckle to yourself. It was not a particulaerly clever joke, but the relief you feel for having made it this far is genuine and has wrapped you in a light and easy feeling. You destination is in sight and you see no signs of SNAKEs as you scan the scene laid out before you. <br><br> Just then you see it: wisps of black smoke rising from down the street. The glaring sound of the fire brigade's clanging bells fiils your ears.</p>
        <p><a href="#slide11">Investigate</a> the smoke.</h3>
      </div>
    </div>

     <div id="slide11" class="step slide itemable" data-y="10000" data-z="5000" data-scale="5">
      <div class="slide-text">
        <h2>23 Fulton Street</h2><br>
        <h1 class="titlepage">Calamity!</h1> <h3>Your destination, Longfellows Printing Press and Paper Supply Store and Museum and Notery Public, is engulfed in flames! You look around. Yes, two nair-do-wells, across the street staring at you with oily smiles on their faces. You duck around the corner as you plot your next move…”</h3><br><br>
        <h1 class="titlepage">To be continued in<br> Whitman Episode 1: Song of the Self-ish </h1>
      </div>
      <div class="menu"><a href="#slide2">Begin Again</a></div>   
    </div>

      <div id="slide20" class="step slide itemable" data-y="3500">
      <div class="slide-text">
        <h2>Silver Bells</h2><br>
        <h3>You begin moving carefully towards the movement you are consumed by darkness. <br><br> A loud crack and dull pain at the base of your neck proceed oblivion. As you slip from consciousness you hope that Miss Dickenson is in town. She is especially good at finding POETs that have gone missing. . .</h3>
      </div>
      <div class="menu"><a href="#slide2">Begin Again</a></div> 
    </div>

    <div id="slide21" class="step slide itemable" data-y="5500">
      <div class="slide-text">
        <h2>Coming Undone</h2><br>
        <h3>You move on to the boat and pick up the bundle. The burlap strip binding the pages together stinks of lamp oil. You remove the first page from the bundle and attempt to read it but it is imcomprehensible to you: <br><br> $( document ).ready(function() {<br>
        console.log('WDI-Lemurs, 2014');<br>
         });<br><br>
        As you work to decipher these arcane markings you are startled by a voice. <br><br>"The famous Walt Whitman! Frankly, sir, I expected better." You look up to see a poorly attired rapscallion wearing a lopsided mask and holding a pistol. "Come along, Mr. Whitman. I know someone you are dying to meet..."
        </h3>
      </div>
      <div class="menu"><a href="#slide2">Begin Again</a></div> 
    </div>

    <div id="slide22" class="step slide itemable" data-y="9500">
      <div class="slide-text">
        <h2>The Ship Shed at Navy Yard</h2><br><br>
        <h3>You take a moment to appreciate the scene afforded you by the height of the shed. Looking down at the waters below you are reminded of your own  words:<br><br></h3>
        <h4>After the Sea-Ship--after the whistling winds;<br>
          After the white-gray sails, taut to their spars and ropes,<br>
          Below, a myriad, myriad waves, hastening, lifting up their necks,<br>
          Tending in ceaseless flow toward the track of the ship:<br>
          Waves of the ocean, bubbling and gurgling, blithely prying,<br>
          Waves, undulating waves--liquid, uneven, emulous waves...<br><br> Pleased with yourself, you move to return to the gate of the<a href="#slide6">Navy Yard</a>.</h4>
      </div>
    </div>

      <div id="slide23" class="step slide itemable" data-y="-3500">
        <div class="slide-text">
           <h2>Red Hook</h2><br>
           <h3>You stand at the corner of Hamilton Avenue and Van Brunt Street. The Atlantic Docks, the largest comglomeration of warehouses and docks to be found anyware in the city stands one block away. <br><br>The Atlantic Docks is the larder for the whole of Brooklyn- Wheat, corn, flour, sugar, molasses, guano, bricks, lime, coal, salt pork, salt beef, lard and bacon can be found there in abundance. thinking about this it occurs to you that you have not had a bite to eat since last night's supper. <br><br>You see Mrs. Miggins Pie Shop, a favorite of the workers in the neighborhood across the street. You could drop in for a quick<a href="#slide24">meal</a>...but perhaps you should press on and make your way back to <a href="#slide8">Montague Hall</a>.</h3>
        </div>
      </div>

      <div id="slide24" class="step slide itemable" data-x="-5500">
        <div class="slide-text">
           <h2>Mrs. Miggin's Pie Shop</h2><br>
           <h3>It is danker than you remember, and smells of mildew and rotting wood. You quickly make your way to a table in the back, one where you can easily see the front door. You order a lamb pie and a stein of hard cider.<br><br>
            Your food comes surprisingly quickly and is suprisingly flavorful. You finish the pie quickly and turn your full attention on the stein of cider, which is still have full. You take large swallow and it hits. A wave of discomfort that starts in your stomach and quickly makes its way up to your head. Your eyelids grow heavy, your tongue swells.
            As your vision fails you see a woman wearing a hat made of snakeskin in the opposite corner. She raises her stein to you and laughs. <br><br>"A neophyte's error...neophyte's....." you mumble to yourself as you collapse.</h3>
        </div>
        <div class="menu"><a href="#slide2">Begin Again</a></div> 
      </div>




  </div>

  <script>
  /**
 * impress.js
 *
 * impress.js is a presentation tool based on the power of CSS3 transforms and transitions
 * in modern browsers and inspired by the idea behind prezi.com.
 *
 *
 * Copyright 2011-2012 Bartek Szopka (@bartaz)
 *
 * Released under the MIT and GPL Licenses.
 *
 * ------------------------------------------------
 *  author:  Bartek Szopka
 *  version: 0.5.3
 *  url:     http://bartaz.github.com/impress.js/
 *  source:  http://github.com/bartaz/impress.js/
 */

/*jshint bitwise:true, curly:true, eqeqeq:true, forin:true, latedef:true, newcap:true,
         noarg:true, noempty:true, undef:true, strict:true, browser:true */

// You are one of those who like to know how thing work inside?
// Let me show you the cogs that make impress.js run...
(function ( document, window ) {
    'use strict';
    
    // HELPER FUNCTIONS
    
    // `pfx` is a function that takes a standard CSS property name as a parameter
    // and returns it's prefixed version valid for current browser it runs in.
    // The code is heavily inspired by Modernizr http://www.modernizr.com/
    var pfx = (function () {
        
        var style = document.createElement('dummy').style,
            prefixes = 'Webkit Moz O ms Khtml'.split(' '),
            memory = {};
        
        return function ( prop ) {
            if ( typeof memory[ prop ] === "undefined" ) {
                
                var ucProp  = prop.charAt(0).toUpperCase() + prop.substr(1),
                    props   = (prop + ' ' + prefixes.join(ucProp + ' ') + ucProp).split(' ');
                
                memory[ prop ] = null;
                for ( var i in props ) {
                    if ( style[ props[i] ] !== undefined ) {
                        memory[ prop ] = props[i];
                        break;
                    }
                }
            
            }
            
            return memory[ prop ];
        };
    
    })();
    
    // `arraify` takes an array-like object and turns it into real Array
    // to make all the Array.prototype goodness available.
    var arrayify = function ( a ) {
        return [].slice.call( a );
    };
    
    // `css` function applies the styles given in `props` object to the element
    // given as `el`. It runs all property names through `pfx` function to make
    // sure proper prefixed version of the property is used.
    var css = function ( el, props ) {
        var key, pkey;
        for ( key in props ) {
            if ( props.hasOwnProperty(key) ) {
                pkey = pfx(key);
                if ( pkey !== null ) {
                    el.style[pkey] = props[key];
                }
            }
        }
        return el;
    };
    
    // `toNumber` takes a value given as `numeric` parameter and tries to turn
    // it into a number. If it is not possible it returns 0 (or other value
    // given as `fallback`).
    var toNumber = function (numeric, fallback) {
        return isNaN(numeric) ? (fallback || 0) : Number(numeric);
    };
    
    // `byId` returns element with given `id` - you probably have guessed that ;)
    var byId = function ( id ) {
        return document.getElementById(id);
    };
    
    // `$` returns first element for given CSS `selector` in the `context` of
    // the given element or whole document.
    var $ = function ( selector, context ) {
        context = context || document;
        return context.querySelector(selector);
    };
    
    // `$$` return an array of elements for given CSS `selector` in the `context` of
    // the given element or whole document.
    var $$ = function ( selector, context ) {
        context = context || document;
        return arrayify( context.querySelectorAll(selector) );
    };
    
    // `triggerEvent` builds a custom DOM event with given `eventName` and `detail` data
    // and triggers it on element given as `el`.
    var triggerEvent = function (el, eventName, detail) {
        var event = document.createEvent("CustomEvent");
        event.initCustomEvent(eventName, true, true, detail);
        el.dispatchEvent(event);
    };
    
    // `translate` builds a translate transform string for given data.
    var translate = function ( t ) {
        return " translate3d(" + t.x + "px," + t.y + "px," + t.z + "px) ";
    };
    
    // `rotate` builds a rotate transform string for given data.
    // By default the rotations are in X Y Z order that can be reverted by passing `true`
    // as second parameter.
    var rotate = function ( r, revert ) {
        var rX = " rotateX(" + r.x + "deg) ",
            rY = " rotateY(" + r.y + "deg) ",
            rZ = " rotateZ(" + r.z + "deg) ";
        
        return revert ? rZ+rY+rX : rX+rY+rZ;
    };
    
    // `scale` builds a scale transform string for given data.
    var scale = function ( s ) {
        return " scale(" + s + ") ";
    };
    
    // `perspective` builds a perspective transform string for given data.
    var perspective = function ( p ) {
        return " perspective(" + p + "px) ";
    };
    
    // `getElementFromHash` returns an element located by id from hash part of
    // window location.
    var getElementFromHash = function () {
        // get id from url # by removing `#` or `#/` from the beginning,
        // so both "fallback" `#slide-id` and "enhanced" `#/slide-id` will work
        return byId( window.location.hash.replace(/^#\/?/,"") );
    };
    
    // `computeWindowScale` counts the scale factor between window size and size
    // defined for the presentation in the config.
    var computeWindowScale = function ( config ) {
        var hScale = window.innerHeight / config.height,
            wScale = window.innerWidth / config.width,
            scale = hScale > wScale ? wScale : hScale;
        
        if (config.maxScale && scale > config.maxScale) {
            scale = config.maxScale;
        }
        
        if (config.minScale && scale < config.minScale) {
            scale = config.minScale;
        }
        
        return scale;
    };
    
    // CHECK SUPPORT
    var body = document.body;
    
    var ua = navigator.userAgent.toLowerCase();
    var impressSupported = 
                          // browser should support CSS 3D transtorms 
                           ( pfx("perspective") !== null ) &&
                           
                          // and `classList` and `dataset` APIs
                           ( body.classList ) &&
                           ( body.dataset ) &&
                           
                          // but some mobile devices need to be blacklisted,
                          // because their CSS 3D support or hardware is not
                          // good enough to run impress.js properly, sorry...
                           ( ua.search(/(iphone)|(ipod)|(android)/) === -1 );
    
    if (!impressSupported) {
        // we can't be sure that `classList` is supported
        body.className += " impress-not-supported ";
    } else {
        body.classList.remove("impress-not-supported");
        body.classList.add("impress-supported");
    }
    
    // GLOBALS AND DEFAULTS
    
    // This is were the root elements of all impress.js instances will be kept.
    // Yes, this means you can have more than one instance on a page, but I'm not
    // sure if it makes any sense in practice ;)
    var roots = {};
    
    // some default config values.
    var defaults = {
        width: 1024,
        height: 768,
        maxScale: 1,
        minScale: 0,
        
        perspective: 1000,
        
        transitionDuration: 1000
    };
    
    // it's just an empty function ... and a useless comment.
    var empty = function () { return false; };
    
    // IMPRESS.JS API
    
    // And that's where interesting things will start to happen.
    // It's the core `impress` function that returns the impress.js API
    // for a presentation based on the element with given id ('impress'
    // by default).
    var impress = window.impress = function ( rootId ) {
        
        // If impress.js is not supported by the browser return a dummy API
        // it may not be a perfect solution but we return early and avoid
        // running code that may use features not implemented in the browser.
        if (!impressSupported) {
            return {
                init: empty,
                goto: empty,
                prev: empty,
                next: empty
            };
        }
        
        rootId = rootId || "impress";
        
        // if given root is already initialized just return the API
        if (roots["impress-root-" + rootId]) {
            return roots["impress-root-" + rootId];
        }
        
        // data of all presentation steps
        var stepsData = {};
        
        // element of currently active step
        var activeStep = null;
        
        // current state (position, rotation and scale) of the presentation
        var currentState = null;
        
        // array of step elements
        var steps = null;
        
        // configuration options
        var config = null;
        
        // scale factor of the browser window
        var windowScale = null;        
        
        // root presentation elements
        var root = byId( rootId );
        var canvas = document.createElement("div");
        
        var initialized = false;
        
        // STEP EVENTS
        //
        // There are currently two step events triggered by impress.js
        // `impress:stepenter` is triggered when the step is shown on the 
        // screen (the transition from the previous one is finished) and
        // `impress:stepleave` is triggered when the step is left (the
        // transition to next step just starts).
        
        // reference to last entered step
        var lastEntered = null;
        
        // `onStepEnter` is called whenever the step element is entered
        // but the event is triggered only if the step is different than
        // last entered step.
        var onStepEnter = function (step) {
            if (lastEntered !== step) {
                triggerEvent(step, "impress:stepenter");
                lastEntered = step;
            }
        };
        
        // `onStepLeave` is called whenever the step element is left
        // but the event is triggered only if the step is the same as
        // last entered step.
        var onStepLeave = function (step) {
            if (lastEntered === step) {
                triggerEvent(step, "impress:stepleave");
                lastEntered = null;
            }
        };
        
        // `initStep` initializes given step element by reading data from its
        // data attributes and setting correct styles.
        var initStep = function ( el, idx ) {
            var data = el.dataset,
                step = {
                    translate: {
                        x: toNumber(data.x),
                        y: toNumber(data.y),
                        z: toNumber(data.z)
                    },
                    rotate: {
                        x: toNumber(data.rotateX),
                        y: toNumber(data.rotateY),
                        z: toNumber(data.rotateZ || data.rotate)
                    },
                    scale: toNumber(data.scale, 1),
                    el: el
                };
            
            if ( !el.id ) {
                el.id = "step-" + (idx + 1);
            }
            
            stepsData["impress-" + el.id] = step;
            
            css(el, {
                position: "absolute",
                transform: "translate(-50%,-50%)" +
                           translate(step.translate) +
                           rotate(step.rotate) +
                           scale(step.scale),
                transformStyle: "preserve-3d"
            });
        };
        
        // `init` API function that initializes (and runs) the presentation.
        var init = function () {
            if (initialized) { return; }
            
            // First we set up the viewport for mobile devices.
            // For some reason iPad goes nuts when it is not done properly.
            var meta = $("meta[name='viewport']") || document.createElement("meta");
            meta.content = "width=device-width, minimum-scale=1, maximum-scale=1, user-scalable=no";
            if (meta.parentNode !== document.head) {
                meta.name = 'viewport';
                document.head.appendChild(meta);
            }
            
            // initialize configuration object
            var rootData = root.dataset;
            config = {
                width: toNumber( rootData.width, defaults.width ),
                height: toNumber( rootData.height, defaults.height ),
                maxScale: toNumber( rootData.maxScale, defaults.maxScale ),
                minScale: toNumber( rootData.minScale, defaults.minScale ),                
                perspective: toNumber( rootData.perspective, defaults.perspective ),
                transitionDuration: toNumber( rootData.transitionDuration, defaults.transitionDuration )
            };
            
            windowScale = computeWindowScale( config );
            
            // wrap steps with "canvas" element
            arrayify( root.childNodes ).forEach(function ( el ) {
                canvas.appendChild( el );
            });
            root.appendChild(canvas);
            
            // set initial styles
            document.documentElement.style.height = "100%";
            
            css(body, {
                height: "100%",
                overflow: "hidden"
            });
            
            var rootStyles = {
                position: "absolute",
                transformOrigin: "top left",
                transition: "all 0s ease-in-out",
                transformStyle: "preserve-3d"
            };
            
            css(root, rootStyles);
            css(root, {
                top: "50%",
                left: "50%",
                transform: perspective( config.perspective/windowScale ) + scale( windowScale )
            });
            css(canvas, rootStyles);
            
            body.classList.remove("impress-disabled");
            body.classList.add("impress-enabled");
            
            // get and init steps
            steps = $$(".step", root);
            steps.forEach( initStep );
            
            // set a default initial state of the canvas
            currentState = {
                translate: { x: 0, y: 0, z: 0 },
                rotate:    { x: 0, y: 0, z: 0 },
                scale:     1
            };
            
            initialized = true;
            
            triggerEvent(root, "impress:init", { api: roots[ "impress-root-" + rootId ] });
        };
        
        // `getStep` is a helper function that returns a step element defined by parameter.
        // If a number is given, step with index given by the number is returned, if a string
        // is given step element with such id is returned, if DOM element is given it is returned
        // if it is a correct step element.
        var getStep = function ( step ) {
            if (typeof step === "number") {
                step = step < 0 ? steps[ steps.length + step] : steps[ step ];
            } else if (typeof step === "string") {
                step = byId(step);
            }
            return (step && step.id && stepsData["impress-" + step.id]) ? step : null;
        };
        
        // used to reset timeout for `impress:stepenter` event
        var stepEnterTimeout = null;
        
        // `goto` API function that moves to step given with `el` parameter (by index, id or element),
        // with a transition `duration` optionally given as second parameter.
        var goto = function ( el, duration ) {
            
            if ( !initialized || !(el = getStep(el)) ) {
                // presentation not initialized or given element is not a step
                return false;
            }
            
            // Sometimes it's possible to trigger focus on first link with some keyboard action.
            // Browser in such a case tries to scroll the page to make this element visible
            // (even that body overflow is set to hidden) and it breaks our careful positioning.
            //
            // So, as a lousy (and lazy) workaround we will make the page scroll back to the top
            // whenever slide is selected
            //
            // If you are reading this and know any better way to handle it, I'll be glad to hear about it!
            window.scrollTo(0, 0);
            
            var step = stepsData["impress-" + el.id];
            
            if ( activeStep ) {
                activeStep.classList.remove("active");
                body.classList.remove("impress-on-" + activeStep.id);
            }
            el.classList.add("active");
            
            body.classList.add("impress-on-" + el.id);
            
            // compute target state of the canvas based on given step
            var target = {
                rotate: {
                    x: -step.rotate.x,
                    y: -step.rotate.y,
                    z: -step.rotate.z
                },
                translate: {
                    x: -step.translate.x,
                    y: -step.translate.y,
                    z: -step.translate.z
                },
                scale: 1 / step.scale
            };
            
            // Check if the transition is zooming in or not.
            //
            // This information is used to alter the transition style:
            // when we are zooming in - we start with move and rotate transition
            // and the scaling is delayed, but when we are zooming out we start
            // with scaling down and move and rotation are delayed.
            var zoomin = target.scale >= currentState.scale;
            
            duration = toNumber(duration, config.transitionDuration);
            var delay = (duration / 2);
            
            // if the same step is re-selected, force computing window scaling,
            // because it is likely to be caused by window resize
            if (el === activeStep) {
                windowScale = computeWindowScale(config);
            }
            
            var targetScale = target.scale * windowScale;
            
            // trigger leave of currently active element (if it's not the same step again)
            if (activeStep && activeStep !== el) {
                onStepLeave(activeStep);
            }
            
            // Now we alter transforms of `root` and `canvas` to trigger transitions.
            //
            // And here is why there are two elements: `root` and `canvas` - they are
            // being animated separately:
            // `root` is used for scaling and `canvas` for translate and rotations.
            // Transitions on them are triggered with different delays (to make
            // visually nice and 'natural' looking transitions), so we need to know
            // that both of them are finished.
            css(root, {
                // to keep the perspective look similar for different scales
                // we need to 'scale' the perspective, too
                transform: perspective( config.perspective / targetScale ) + scale( targetScale ),
                transitionDuration: duration + "ms",
                transitionDelay: (zoomin ? delay : 0) + "ms"
            });
            
            css(canvas, {
                transform: rotate(target.rotate, true) + translate(target.translate),
                transitionDuration: duration + "ms",
                transitionDelay: (zoomin ? 0 : delay) + "ms"
            });
            
            // Here is a tricky part...
            //
            // If there is no change in scale or no change in rotation and translation, it means there was actually
            // no delay - because there was no transition on `root` or `canvas` elements.
            // We want to trigger `impress:stepenter` event in the correct moment, so here we compare the current
            // and target values to check if delay should be taken into account.
            //
            // I know that this `if` statement looks scary, but it's pretty simple when you know what is going on
            // - it's simply comparing all the values.
            if ( currentState.scale === target.scale ||
                (currentState.rotate.x === target.rotate.x && currentState.rotate.y === target.rotate.y &&
                 currentState.rotate.z === target.rotate.z && currentState.translate.x === target.translate.x &&
                 currentState.translate.y === target.translate.y && currentState.translate.z === target.translate.z) ) {
                delay = 0;
            }
            
            // store current state
            currentState = target;
            activeStep = el;
            
            // And here is where we trigger `impress:stepenter` event.
            // We simply set up a timeout to fire it taking transition duration (and possible delay) into account.
            //
            // I really wanted to make it in more elegant way. The `transitionend` event seemed to be the best way
            // to do it, but the fact that I'm using transitions on two separate elements and that the `transitionend`
            // event is only triggered when there was a transition (change in the values) caused some bugs and 
            // made the code really complicated, cause I had to handle all the conditions separately. And it still
            // needed a `setTimeout` fallback for the situations when there is no transition at all.
            // So I decided that I'd rather make the code simpler than use shiny new `transitionend`.
            //
            // If you want learn something interesting and see how it was done with `transitionend` go back to
            // version 0.5.2 of impress.js: http://github.com/bartaz/impress.js/blob/0.5.2/js/impress.js
            window.clearTimeout(stepEnterTimeout);
            stepEnterTimeout = window.setTimeout(function() {
                onStepEnter(activeStep);
            }, duration + delay);
            
            return el;
        };
        
        // `prev` API function goes to previous step (in document order)
        var prev = function () {
            var prev = steps.indexOf( activeStep ) - 1;
            prev = prev >= 0 ? steps[ prev ] : steps[ steps.length-1 ];
            
            return goto(prev);
        };
        
        // `next` API function goes to next step (in document order)
        var next = function () {
            var next = steps.indexOf( activeStep ) + 1;
            next = next < steps.length ? steps[ next ] : steps[ 0 ];
            
            return goto(next);
        };
        
        // Adding some useful classes to step elements.
        //
        // All the steps that have not been shown yet are given `future` class.
        // When the step is entered the `future` class is removed and the `present`
        // class is given. When the step is left `present` class is replaced with
        // `past` class.
        //
        // So every step element is always in one of three possible states:
        // `future`, `present` and `past`.
        //
        // There classes can be used in CSS to style different types of steps.
        // For example the `present` class can be used to trigger some custom
        // animations when step is shown.
        root.addEventListener("impress:init", function(){
            // STEP CLASSES
            steps.forEach(function (step) {
                step.classList.add("future");
            });
            
            root.addEventListener("impress:stepenter", function (event) {
                event.target.classList.remove("past");
                event.target.classList.remove("future");
                event.target.classList.add("present");
            }, false);
            
            root.addEventListener("impress:stepleave", function (event) {
                event.target.classList.remove("present");
                event.target.classList.add("past");
            }, false);
            
        }, false);
        
        // Adding hash change support.
        root.addEventListener("impress:init", function(){
            
            // last hash detected
            var lastHash = "";
            
            // `#/step-id` is used instead of `#step-id` to prevent default browser
            // scrolling to element in hash.
            //
            // And it has to be set after animation finishes, because in Chrome it
            // makes transtion laggy.
            // BUG: http://code.google.com/p/chromium/issues/detail?id=62820
            root.addEventListener("impress:stepenter", function (event) {
                window.location.hash = lastHash = "#/" + event.target.id;
            }, false);
            
            window.addEventListener("hashchange", function () {
                // When the step is entered hash in the location is updated
                // (just few lines above from here), so the hash change is 
                // triggered and we would call `goto` again on the same element.
                //
                // To avoid this we store last entered hash and compare.
                if (window.location.hash !== lastHash) {
                    goto( getElementFromHash() );
                }
            }, false);
            
            // START 
            // by selecting step defined in url or first step of the presentation
            goto(getElementFromHash() || steps[0], 0);
        }, false);
        
        body.classList.add("impress-disabled");
        
        // store and return API for given impress.js root element
        return (roots[ "impress-root-" + rootId ] = {
            init: init,
            goto: goto,
            next: next,
            prev: prev
        });

    };
    
    // flag that can be used in JS to check if browser have passed the support test
    impress.supported = impressSupported;
    
})(document, window);

// NAVIGATION EVENTS

// As you can see this part is separate from the impress.js core code.
// It's because these navigation actions only need what impress.js provides with
// its simple API.
//
// In future I think about moving it to make them optional, move to separate files
// and treat more like a 'plugins'.
(function ( document, window ) {
    'use strict';
    
    // throttling function calls, by Remy Sharp
    // http://remysharp.com/2010/07/21/throttling-function-calls/
    var throttle = function (fn, delay) {
        var timer = null;
        return function () {
            var context = this, args = arguments;
            clearTimeout(timer);
            timer = setTimeout(function () {
                fn.apply(context, args);
            }, delay);
        };
    };
    
    // wait for impress.js to be initialized
    document.addEventListener("impress:init", function (event) {
        // Getting API from event data.
        // So you don't event need to know what is the id of the root element
        // or anything. `impress:init` event data gives you everything you 
        // need to control the presentation that was just initialized.
        var api = event.detail.api;
        
        // KEYBOARD NAVIGATION HANDLERS
        
        // Prevent default keydown action when one of supported key is pressed.
        document.addEventListener("keydown", function ( event ) {
            if ( event.keyCode === 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {
                event.preventDefault();
            }
        }, false);
        
        // Trigger impress action (next or prev) on keyup.
        
        // Supported keys are:
        // [space] - quite common in presentation software to move forward
        // [up] [right] / [down] [left] - again common and natural addition,
        // [pgdown] / [pgup] - often triggered by remote controllers,
        // [tab] - this one is quite controversial, but the reason it ended up on
        //   this list is quite an interesting story... Remember that strange part
        //   in the impress.js code where window is scrolled to 0,0 on every presentation
        //   step, because sometimes browser scrolls viewport because of the focused element?
        //   Well, the [tab] key by default navigates around focusable elements, so clicking
        //   it very often caused scrolling to focused element and breaking impress.js
        //   positioning. I didn't want to just prevent this default action, so I used [tab]
        //   as another way to moving to next step... And yes, I know that for the sake of
        //   consistency I should add [shift+tab] as opposite action...
        document.addEventListener("keyup", function ( event ) {
            if ( event.keyCode === 9 || ( event.keyCode >= 32 && event.keyCode <= 34 ) || (event.keyCode >= 37 && event.keyCode <= 40) ) {
                switch( event.keyCode ) {
                    case 33: // pg up
                    case 37: // left
                    case 38: // up
                             api.prev();
                             break;
                    case 9:  // tab
                    case 32: // space
                    case 34: // pg down
                    case 39: // right
                    case 40: // down
                             api.next();
                             break;
                }
                
                event.preventDefault();
            }
        }, false);
        
        // delegated handler for clicking on the links to presentation steps
        document.addEventListener("click", function ( event ) {
            // event delegation with "bubbling"
            // check if event target (or any of its parents is a link)
            var target = event.target;
            while ( (target.tagName !== "A") &&
                    (target !== document.documentElement) ) {
                target = target.parentNode;
            }
            
            if ( target.tagName === "A" ) {
                var href = target.getAttribute("href");
                
                // if it's a link to presentation step, target this step
                if ( href && href[0] === '#' ) {
                    target = document.getElementById( href.slice(1) );
                }
            }
            
            if ( api.goto(target) ) {
                event.stopImmediatePropagation();
                event.preventDefault();
            }
        }, false);
        
        // delegated handler for clicking on step elements
        document.addEventListener("click", function ( event ) {
            var target = event.target;
            // find closest step element that is not active
            while ( !(target.classList.contains("step") && !target.classList.contains("active")) &&
                    (target !== document.documentElement) ) {
                target = target.parentNode;
            }
            
            if ( api.goto(target) ) {
                event.preventDefault();
            }
        }, false);
        
        // touch handler to detect taps on the left and right side of the screen
        // based on awesome work of @hakimel: https://github.com/hakimel/reveal.js
        document.addEventListener("touchstart", function ( event ) {
            if (event.touches.length === 1) {
                var x = event.touches[0].clientX,
                    width = window.innerWidth * 0.3,
                    result = null;
                    
                if ( x < width ) {
                    result = api.prev();
                } else if ( x > window.innerWidth - width ) {
                    result = api.next();
                }
                
                if (result) {
                    event.preventDefault();
                }
            }
        }, false);
        
        // rescale presentation when window is resized
        window.addEventListener("resize", throttle(function () {
            // force going to active step again, to trigger rescaling
            api.goto( document.querySelector(".active"), 500 );
        }, 250), false);
        
    }, false);
        
})(document, window);

// THAT'S ALL FOLKS!
//
// Thanks for reading it all.
// Or thanks for scrolling down and reading the last part.
//
// I've learnt a lot when building impress.js and I hope this code and comments
// will help somebody learn at least some part of it.





  </script>

  <!-- <script type="text/javascript" src="impress.js"></script> -->
  <script>impress().init();</script>
  <!-- <script type="text/javascript" src="game.js"></script> 
  <script type="text/javascript" src="Hands.js"></script> -->
</body>
</html>